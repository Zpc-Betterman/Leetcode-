给定两个数组，编写一个函数来计算它们的交集。

 

示例 1：

输入：nums1 = [1,2,2,1], nums2 = [2,2]
输出：[2,2]
示例 2:

输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出：[4,9]
 

说明：

输出结果中每个元素出现的次数，应与元素在两个数组中出现次数的最小值一致。
我们可以不考虑输出结果的顺序。
进阶：

如果给定的数组已经排好序呢？你将如何优化你的算法？
如果 nums1 的大小比 nums2 小很多，哪种方法更优？
如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？



C++

1      使用哈希表先做映射，再去做
 
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        if (nums1.size() > nums2.size()) {
            return intersect(nums2, nums1);                // 调用原函数， 也就是一直使用长度较小的那个数组
        }
        unordered_map <int, int> m;                      // 哈希表
        for (int num : nums1) {
            ++m[num];                                            // 对长度较短的数组放进哈希表，key就是各个数字，value就是各数字出现的次数
        }
        vector<int> intersection;
        for (int num : nums2) {
            if (m.count(num)) {                              //  count 函数显示如果有这个数的话显示为1， 没有为0
                intersection.push_back(num);         // 如果较长数组里出现了这个数字，就在哈希表里-1，并且把这个数字放入结果的数组里         ！！push_back函数
                --m[num];
                if (m[num] == 0) {
                    m.erase(num);                         // 。。。 这个好理解                   erase函数要注意一下
                }
            }
        }
        return intersection;

    }
};


2
排序后的数组找出交集，利用双指针
初始时，两个指针分别指向两个数组的头部。每次比较两个指针指向的两个数组中的数字，如果两个数字不相等，则将指向较小数字的指针右移一位，如果两个数字相等，将该数字添加到答案，并将两个指针都右移一位。当至少有一个指针超出数组范围时，遍历结束



class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        sort(nums1.begin(), nums1.end());                                     // 排序            排序的时间复杂度O（mlogm+nlogn）
        sort(nums2.begin(), nums2.end());
        int length1 = nums1.size(), length2 = nums2.size();          
        vector<int> intersection;
        int index1 = 0, index2 = 0;
        while (index1 < length1 && index2 < length2) {                       // 直到有一个数组的指针指向最后停止
            if (nums1[index1] < nums2[index2]) {
                index1++;
            } else if (nums1[index1] > nums2[index2]) {
                index2++;
            } else {
                intersection.push_back(nums1[index1]);
                index1++;
                index2++;
            }
        }
        return intersection;
    }
};

